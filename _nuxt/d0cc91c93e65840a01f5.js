(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{171:function(e,t){e.exports={attributes:{title:"The Magic of Provide/Inject in Vue.js",image:"magic_of_provide_and_inject.png",excerpt:"Provide and Inject are used together in Vue.js to allow an ancestor component to serve as a dependency injector for all its descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain.",published_date:"2019-09-21T18:15:00.000Z",tags:["vue","provide","inject","dependency injection"],url:"the-magic-of-provide-inject",canonical_url:"https://medium.com/js-dojo/the-magic-of-provide-inject-a27041df33b2",subtitle:"Dependency Injection in Vue.js will be a breeze with Provide and Inject duo",featured_image:"/uploads/magic_of_provide_and_inject.png"},html:"<p>Often times is overwhelming to look at a larger component as a whole because there may be too much going on, breaking things down allows us to simplify a complex problem and focus our attention in more manageable pieces. One obvious complication of breaking down a large component is data flow and management.</p>\n<p>Provide and Inject are used together to allow an ancestor component to serve as a dependency injector for all its descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain.</p>\n<h2>Example:</h2>\n<p>For example, a parent component can inject validation messages in input components. Below is an example where the <code>VueForm</code> the component is passing down an <code>errors</code> variable down to <code>TextInput</code> component.</p>\n<pre><code>// A basic example of provide/inject\n\nconst VueForm = {\n\tprovide:{\n  \terrors: {\n      \tname: &quot;The name field is required&quot;,\n      },\n  },\n  template: `&lt;form&gt;\n              &lt;slot&gt;&lt;/slot&gt;\t\n            &lt;/form&gt;`\n}\n\nconst TextInput = {\n\tinject: ['errors'],\n  created(){\n  \tconsole.log(this.errors)\n  },\n  template: `\n            &lt;div&gt;\n            \tName:&lt;br&gt;\n  \t\t\t\t\t\t&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br&gt;&lt;br&gt;\n              &lt;span v-if=&quot;this.errors.hasOwnProperty('name')&quot; class=&quot;help-text danger&quot; v-text=&quot;this.errors.name&quot;&gt;&lt;/span&gt;\n            &lt;/div&gt;\n            `\n}\n\nnew Vue({\n  el: &quot;#app&quot;,\n  components: {\n    'vue-form': VueForm,\n    'text-input': TextInput,\n  },\n})\n</code></pre>\n<p>You can also provide and inject a function. The below example demonstrates passing <code>getError()</code> and <code>setError()</code> functions using provide/inject.</p>\n<pre><code>// provide and inject functions\n\nconst VueForm = {\n\tprovide: function() {\n  \treturn {\n    \tgetError: this.getError,\n      setError: this.setError\n    }\n  },\n  data(){\n  \treturn {\n    \terrors: {\n      \tname: &quot;The name field is required.&quot;\n      }\n    }\n  },\n  methods: {\n  \tgetError: function(name){\n    \treturn this.errors.hasOwnProperty(name) ? this.errors.name : null;\n    },\n    setError: function(name, value){\n    \tthis.errors.name = value;\n    }\n  },\n  template: `&lt;form&gt;\n              &lt;slot&gt;&lt;/slot&gt;\t\n            &lt;/form&gt;`\n}\n\nconst TextInput = {\n\tinject: ['getError', 'setError'],\n  template: `\n            &lt;div&gt;\n            \tName:&lt;br&gt;\n              &lt;input type=&quot;text&quot; name=&quot;name&quot; @change=&quot;setError('name', 'This is a custom error message')&quot;&gt;&lt;br&gt;&lt;br&gt;\n              &lt;span class=&quot;help-text danger&quot; v-text=&quot;getError('name')&quot;&gt;&lt;/span&gt;\n            &lt;/div&gt;\n            `\n}\n\nnew Vue({\n  el: &quot;#app&quot;,\n  components: {\n    'vue-form': VueForm,\n    'text-input': TextInput,\n  },\n})\n</code></pre>\n<p>Injecting functions using provide/inject</p>\n<blockquote>\n<p><em>Note: the <code>provide</code> and <code>inject</code> bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.</em></p>\n</blockquote>\n<pre><code>// Reactive binding in provide/inject\n\nconst VueMenu = {\n\tinject: ['menu'],\n  created(){\n  \tconsole.log(this.menu)\n  },\n  data(){\n  \treturn {\n    newItem:&quot;&quot;,\n    }\n  },\n  methods:{\n  \taddMenuItem: function(){\n    console.log(this.newItem)\n    \tthis.menu.menuOptions.push(this.newItem);\n      this.newItem=&quot;&quot;;\n    }\n  },\n  template: `\n            &lt;div&gt;\n              &lt;ul id=&quot;example&quot;&gt;   \n                 &lt;li v-for=&quot;item in menu.menuOptions&quot;&gt;     \n                   {{ item }}   \n                 &lt;/li&gt; \n               &lt;/ul&gt;\n               &lt;input type=&quot;text&quot; placeholder=&quot;Enter name&quot; v-model=&quot;newItem&quot;/&gt;\n               &lt;button type=&quot;submit&quot; @click=&quot;addMenuItem&quot;&gt;Add Menu Item&lt;/button&gt;\n            &lt;/div&gt;\n            `\n}\n\nnew Vue({\n  el: &quot;#app&quot;,\n  components: {\n    'vue-menu': VueMenu,\n  },\n  provide () {\n    const menu = {}\n    Object.defineProperty(menu, 'menuOptions', {\n       enumerable: true,\n       get: () =&gt; this.menuOptions,\n    })\n    return { menu }\n  },\n\n  data: () =&gt; ({ menuOptions: ['Home', 'About','Contact'] }),\n})\n</code></pre>\n<p>Injections are available in <code>props</code> and <code>data</code>. So, you could set <code>prop</code> defaults to injected data or you can use injections as initial <code>data</code>.</p>\n<p>More on provide/inject on the official documentation <a href=\"https://vuejs.org/v2/api/#provide-inject\">here</a>.</p>\n"}}}]);