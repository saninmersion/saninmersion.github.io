(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{168:function(e,t){e.exports={attributes:{tags:["Laravel","Console","Command","UI","UX"],title:"Crafting User-Friendly Laravel Command",subtitle:"Design your console commands for better user experience",featured_image:"/uploads/1_dJ0d_PRESk3Ak7_gKMRHxg.png",excerpt:"Design your console commands for better user experience",published_date:"2020-02-19T18:15:00.000Z",canonical_url:""},html:"<p>To create a new command, we can use the <code>make:command</code> Artisan command. This command will create a new command class in the <code>app/Console/Commands</code> directory.</p>\n<pre><code>php artisan make:command DataCleaner\n</code></pre>\n<p>Let‚Äôs take a look at the example command to clean data on a website.</p>\n<pre><code>class DataCleaner extends Command{\n\tprotected $signature = 'data:clean { ‚Äî all} {website}';   \n    protected $description = 'Clean Website Data';    \n    \n    public function __construct()   {     \n    \tparent::__construct();   \n    }      \n    \n    public function handle(\n   \t  WebsiteRepository $websiteRepository, \n      CleanerService $cleanerService\n    ){     \n    \t$website = $this-&gt;argument(‚Äòwebsite‚Äô);     \n        $all = $this-&gt;option(‚Äòall‚Äô);          \n        if ( $website ) {       \n        \t$websiteRepository-&gt;filterByFqdn($website);\n        }\n        \n         $websites = $websiteRepository-&gt;all();\n         $website-&gt;each(function ($site){       \n         \t$cleanerService-&gt;run($site-&gt;toArray());\n            }   \n         ); \n     }\n}\n</code></pre>\n<blockquote>\n<p>Note that we are able to inject any dependencies we need into the command‚Äôs handle method. We injected <code>WebsiteRepository</code> and <code>CleanerService</code> class in the handle method above.</p>\n</blockquote>\n<h3>Command Structure</h3>\n<p>The <code>signature</code> and <code>description</code> properties of the class will be used when displaying your command on the list screen.</p>\n<pre><code>protected $signature = ‚Äòdata:clean { ‚Äî all} {website}‚Äô;\n</code></pre>\n<p>The <code>signature</code> property allows you to define the name, arguments, and options for the command in a single, expressive, route-like syntax.</p>\n<p>All user-supplied <code>arguments</code> and <code>options</code> are wrapped in curly braces. In the following example, the command defines one required argument: <code>website</code>.</p>\n<p>You may also make arguments optional and define default values for arguments:</p>\n<pre><code>data:clean {website?} // Optional argument‚Ä¶\n\ndata:clean {website?=sandipshrestha.com.np} // Optional argument with default value‚Ä¶\n</code></pre>\n<p><code>Options</code> are prefixed by two hyphens ( ‚Äî ) when they are specified on the command line. There are two types of options: those that receive a value and those that don‚Äôt. Options that don‚Äôt receive a value serve as a boolean ‚Äúswitch‚Äù. In the following example, the command defines one option: <code>all</code>.</p>\n<p>The <code>handle</code> method will be called when your command is executed. We place our command logic in this method.</p>\n<h3>Retrieving Input</h3>\n<p>We can access the values for the arguments and options accepted by our command by using the argument and option methods:</p>\n<pre><code>// retrieve the website argument value...\n$website = $this-&gt;argument(‚Äòwebsite‚Äô);\n\n// retrieve all of the arguments as an array...\n$arguments = $this-&gt;arguments();\n\n// Retrieve a specific option...\n$all = $this-&gt;option('all');\n\n// Retrieve all options...\n$options = $this-&gt;options();\n</code></pre>\n<p>We can also ask the input value from users by using the following methods.</p>\n<pre><code>// prompt the user with a question\n$name = $this-&gt;ask('What the domain name of the website?');\n\n// similar to ask, but the user's input will be hidden as they type\n$password = $this-&gt;secret('What is the admin password?');\n\n// asking For Confirmation\n$this-&gt;confirm('Are you sure? All data will be deleted.')\n\n// used to provide auto-completion for possible choices\n$website = $this-&gt;anticipate(\n\t'What the domain name of the website?',\n\t['google.com', 'facebook.com']\n);\n\n// give the user a predefined set of choices\n$website = $this-&gt;choice(\n\t'What the domain name of the website?', \n\t['facebook.com', 'google.com', 'linked.in'], \n    $defaultIndex\n );\n</code></pre>\n<h3>Writing Output</h3>\n<p>To send output to our console as feedback, we can use the <code>line</code>, <code>info</code>, <code>comment</code>, <code>question</code>, <code>warn</code>, and <code>error</code> methods. Each of these methods will display the output text in appropriate colors for their purpose. Expect these text output method, we are also provided with two very useful and appealing layouts <code>Table</code> and <code>Progress Bar</code>.</p>\n<h4>Table Layouts</h4>\n<p>The <code>table</code> method makes it easy to show tabular data. We just need to pass in the headers and rows to the method. The width and height will be dynamically calculated based on the given data:</p>\n<pre><code>$this-&gt;table(['ID', 'name', 'fqdn'], $websites-&gt;toArray());\n</code></pre>\n<p><img src=\"/uploads/1_yBEtLlPMNokk8kLVIn7aKw.png\" alt=\"\"></p>\n<h4>Progress Bars</h4>\n<p>For iterative or long-running tasks, we could show a progress indicator as feedback to the user. Using the <code>output</code> object, we can start, advance and stop the Progress Bar. First, define the total number of steps the process will iterate through. Then, advance the Progress Bar using <code>$bar-&gt;advance();</code> after processing each item:</p>\n<pre><code>$bar = $this-&gt;output-&gt;createProgressBar(count($websites));\n</code></pre>\n<p><img src=\"/uploads/1_dJ0d_PRESk3Ak7_gKMRHxg-1.png\" alt=\"\"></p>\n<hr>\n<h3>Output</h3>\n<p>The final code looks like below:</p>\n<pre><code>class DataCleaner extends Command{   \n\tprotected $signature = ‚Äòdata:clean { ‚Äî all} {website}‚Äô;   \n    protected $description = ‚ÄòClean Website Data‚Äô;    \n    \n    public function __construct() {     \n    \tparent::__construct();   \n    }      \n    \n    public function handle(\n    \tWebsiteRepository $websiteRepository,\n        CleanerService $cleanService   \n     ){     \n     \t$website = $this-&gt;argument(‚Äòwebsite‚Äô);     \n        $all = $this-&gt;option(‚Äòall‚Äô);          \n        if ( $website ) {       \n        \t$websiteRepository-&gt;filterByFqdn($website);\n        }\n        $websites = $websiteRepository-&gt;all();\n        \n        $this-&gt;table(\n        \t['ID', 'name', 'fqdn'], \n            $websites-&gt;toArray()\n\t\t);     \n\t\t$bar = $this-&gt;output-&gt;createProgressBar(count($websites));\n        \n        $website-&gt;each(function ($site){\n        \t$cleanService-&gt;run($site-&gt;toArray());                  \n            $this-&gt;info(&quot;\\n&quot;.$site-&gt;fqdn.' is clean.');         \n            $bar-&gt;advance();       \n\t\t});   \n    }\n}\n</code></pre>\n<p>These small changes in the interface do actually matter and help make the experience more appealing and intuitive to the user. Now, go and write a beautiful command üòÉ.</p>\n<hr>\n<blockquote>\n<p>Great things are not done by impulse, but by a series of small things brought together.</p>\n<p>‚Äî George Elliot</p>\n</blockquote>\n"}}}]);