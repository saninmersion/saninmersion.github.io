(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{169:function(e,t){e.exports={attributes:{title:"Global Loader Component using Vue.js and Axios Interceptors",image:"global-loader-component-using-vue-and-axios-interceptors.png",excerpt:"Making of a global loader component that will be invoked from anywhere in the app while making ajax calls using Axios interceptors.",published_date:"2019-07-31T00:00:00.000Z",tags:["vue","axios","javascript","loader"],url:"global-loader-component-using-vue-and-axios-interceptors",canonical_url:"https://codeburst.io/global-loader-component-using-vue-js-and-axios-interceptors-3880a136a4ac",subtitle:"Making of a global loader component that will be invoked from anywhere in the app while making ajax calls using Axios interceptors.",featured_image:"/uploads/hourglass.jpg"},html:"<p>We are always optimizing our web pages and applications to open in a zippy. But, sometimes, it is necessary to let the users wait for a brief moment for all the data and pages to load. We will need something to get the users' attention and keep them on the site long enough for all the content to load or to notify them that work is being done in the background.\nOne way to do that is by showing a beautiful, engaging and informative loading animation or loading gif in the website whenever background tasks are running.</p>\n<h2>Loader Component</h2>\n<p><img src=\"/uploads/loader.gif\" alt=\"\"></p>\n<p>Below is the code for a simple Loader component in vue. We have two states isVisible to show/hide the loader and text to define the loading text.</p>\n<pre><code>// Loader Component\n\n&lt;template&gt;\n    &lt;div v-if=&quot;isVisible&quot; class=&quot;loader-overlay&quot;&gt;\n        &lt;div class=&quot;loader&quot;&gt;&lt;/div&gt;\n        &lt;span class=&quot;text&quot; v-html=&quot;text&quot;&gt;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    export default {\n        name: &quot;Loader&quot;,\n        props: {\n            isVisible: {type: Boolean, required: true},\n            text: {type: String, required: false, default: &quot;&quot;},\n        },\n}\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot;&gt;\n    .loader-overlay {\n        position: fixed;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: rgba(0, 0, 0, 0.7);\n        z-index: 999;\n        cursor: pointer;\n        span.text {\n            display: inline-block;\n            position: relative;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%,-50%);\n            color: #fff;\n        }\n        .loader {\n            animation: loader-animate 1.5s linear infinite;\n            clip: rect(0, 80px, 80px, 40px);\n            height: 80px;\n            width: 80px;\n            position: absolute;\n            left: calc(50% - 40px);\n            top: calc(50% - 40px);\n            &amp;:after {\n                animation: loader-animate-after 1.5s ease-in-out infinite;\n                clip: rect(0, 80px, 80px, 40px);\n                content: '';\n                border-radius: 50%;\n                height: 80px;\n                width: 80px;\n                position: absolute;\n            }\n        }\n        @keyframes loader-animate {\n            0% {\n                transform: rotate(0deg)\n            }\n            100% {\n                transform: rotate(220deg)\n            }\n        }\n        @keyframes loader-animate-after {\n            0% {\n                box-shadow: inset #fff 0 0 0 17px;\n                transform: rotate(-140deg);\n            }\n            50% {\n                box-shadow: inset #fff 0 0 0 2px;\n            }\n            100% {\n                box-shadow: inset #fff 0 0 0 17px;\n                transform: rotate(140deg);\n            }\n        }\n    }\n&lt;/style&gt;\n</code></pre>\n<h3>Using the loader in our Laravel application</h3>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n &lt;meta charset=&quot;utf-8&quot;/&gt;\n &lt;meta content=&quot;width=device-width, initial-scale=1&quot; name=&quot;viewport&quot;/&gt;\n&lt;/head&gt;\n  \n  &lt;body&gt;\n    &lt;main id=&quot;app&quot;&gt;\n      @include('flash::message')\n      @yield('content')\n      {{-- Loader  --}}\n      &lt;loader :is-visible=&quot;isLoading&quot;&gt;&lt;/loader&gt;\n  \n  &lt;/main&gt;\n \n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2>Call Loader whenever any ajax calls are made</h2>\n<p>We will need to make the loader work show that it is shown when any ajax calls are made and remove the loader upon getting a response. While using Vue js with Laravel we mostly use axios for ajax calls. Axios has native functionality to intercept request/responses called interceptors.</p>\n<h3>Axios Interceptors</h3>\n<p>You can intercept requests or responses to any ajax calls before they are handled by then or catch using interceptors . We will need to remove the request interceptor later on so we will instantiate it and store it as a data axiosInterceptor and just call the response interceptor on mounted() of the main Vue app instance. We are going to define two methods, <code>enableInterceptor</code> to enable the interceptor and `disableInterceptor` to disable the interceptor.</p>\n<pre><code>// functions to enable and disable interceptors\n\n// intantiate request interceptor\nenableInterceptor() {\n  this.axiosInterceptor = window.axios.interceptors.request.use((config) =&gt; {/.../});\n}\n// eject request interceptor\ndisableInterceptor() {\n  window.axios.interceptors.request.eject(this.axiosInterceptor);\n}\n\nnew Vue({\n    el: &quot;#app&quot;,\n    mounted() {\n        this.enableInterceptor()\n    },\n    data: {\n        isLoading: false,\n        axiosInterceptor: null,\n    },\n    methods: {\n        enableInterceptor() {\n            this.axiosInterceptor = window.axios.interceptors.request.use((config) =&gt; {\n                this.isLoading = true\n                return config\n            }, (error) =&gt; {\n                this.isLoading = false  \n                return Promise.reject(error)\n            })\n            \n            window.axios.interceptors.response.use((response) =&gt; {\n                this.isLoading = false    \n                return response\n            }, function(error) {\n                this.isLoading = false\n                return Promise.reject(error)\n            })\n        },\n        \n        disableInterceptor() {\n            window.axios.interceptors.request.eject(this.axiosInterceptor)\n        },     \n    },\n})\n</code></pre>\n<h2>Handling Edge Cases</h2>\n<p>While showing a loader globally whenever any ajax calls are made is pretty awesome and feels magical, it can have some pitfalls.</p>\n<p>For example, I have a slug component that makes an API call to generate a URL on the fly whenever the title changes (i.e on every keypress). However, the loader is shown every time it makes an API call and that is kind of annoying.</p>\n<p>To solve this issue we are going to eject the interceptor before making an API call using the <code>disableInterceptor()</code> method described in the above code and re-enable the interceptor after getting a response using the <code>enableInterceptor()</code> method described above.</p>\n<pre><code>&lt;template&gt;\n    &lt;input type=&quot;text&quot; v-model=&quot;value&quot;&gt;\n&lt;/template&gt;\n\n&lt;script type=&quot;text/ecmascript-6&quot;&gt;\n    export default {\n        name: &quot;slug&quot;,\n        props: {\n            title:{ default:&quot;&quot; }\n            apiUrl: { required: true },\n        },\n        data() {\n            return {\n                value: &quot;&quot;,\n                autoGenerate: true,\n            }\n        },\n        watch: {\n            title: {\n                handler: function(title) {\n                  this.generate(title)\n                },\n            },\n        },\n        methods: {\n            generate(title) {\n                const vm = this\n                \n                this.$root.disableInterceptor()\n                \n                window.axios.get(vm.apiUrl, {\n                    params: {\n                        title: title,\n                    },\n                }).then(function(response) {\n                    vm.value = response.data\n                    vm.$emit(&quot;change&quot;, { &quot;slug&quot;: response.data })\n                    \n                    vm.$root.enableInterceptor()\n                }).catch(function(error) {\n                    console.error(error)\n                    \n                    vm.$root.enableInterceptor()\n                })\n            },\n        },\n    }\n&lt;/script&gt;</code></pre>\n"}}}]);